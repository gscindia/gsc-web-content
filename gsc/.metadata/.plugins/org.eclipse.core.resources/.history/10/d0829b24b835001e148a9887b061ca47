package org.gsc.utility;

import java.nio.charset.StandardCharsets;
import java.util.Base64;

import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;

public class GscSecurity {
	public static String wrap(String message) throws Exception {
        //String message = "This is a secret message.";

        // Generate a secret key
        KeyGenerator keyGenerator = KeyGenerator.getInstance("AES");
        keyGenerator.init(128); // Key size in bits
        SecretKey secretKey = keyGenerator.generateKey();

        // Create a cipher object and initialize it for encryption
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.ENCRYPT_MODE, secretKey);

        // Encrypt the message
        byte[] encryptedBytes = cipher.doFinal(message.getBytes(StandardCharsets.UTF_8));
        
        // Encode the encrypted bytes as a base64 string
        String encryptedText = Base64.getEncoder().encodeToString(encryptedBytes);
        
        System.out.println("Original Message: " + message);
        System.out.println("Encrypted Message: " + encryptedText);

        
        return encryptedText;
    }
	public static String unWrap(String message) {
		// Now, let's decrypt the encrypted message

        // Initialize the cipher for decryption
        cipher.init(Cipher.DECRYPT_MODE, secretKey);

        // Decode the base64 encrypted string back to bytes
        byte[] decodedEncryptedBytes = Base64.getDecoder().decode(encryptedText);

        // Decrypt the bytes
        byte[] decryptedBytes = cipher.doFinal(decodedEncryptedBytes);

        // Convert the decrypted bytes back to a string
        String decryptedMessage = new String(decryptedBytes, StandardCharsets.UTF_8);
        
        System.out.println("Decrypted Message: " + decryptedMessage);
        return decryptedMessage;
	}
}
