package org.gsc.medha.service.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.TreeMap;
import java.util.stream.Collectors;

import javax.persistence.EntityManager;
import javax.persistence.Query;

import org.gsc.medha.entity.Candidate;
import org.gsc.medha.entity.School;
import org.gsc.medha.repository.SchoolRepository;
import org.gsc.medha.service.ExamService;
import org.gsc.medha.service.SchoolService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component
public class DefaultSchoolService implements SchoolService {

	@Autowired
	SchoolRepository schoolRepo;
	@Autowired
	ExamService examService;
	@Autowired
	EntityManager entityManager;

	@Override
	public School add(School school) {
		school.setStatus("ACTIVE");
		return schoolRepo.save(school);
	}

	@Override
	public List<School> getAllSchool() {

		List<School> schools = new ArrayList<>();
		schoolRepo.findAll().forEach(schools::add);
		return schools;
	}

	@Override
	public School findBySchoolName(String name) {
		School school = (School) schoolRepo.findBySchoolName(name).get(0);
		return school;
	}

	@Override
	public School getSchoolById(int id) {
		Optional<School> school = schoolRepo.findById(id);
		return school.isPresent() ? school.stream().collect(Collectors.toList()).get(0) : null;
	}

	@Override
	public List<Candidate> getFormA(Candidate candidate) {

		return schoolRepo.filterFormA(candidate.getSchool(), examService.getActiveExam());
	}

	@Override
	public List<Candidate> getFormAByExam(Candidate candidate) {

		return schoolRepo.filterFormA(candidate.getSchool(), candidate.getExam());
	}

	@Override
	public List<Map<String, String>> getStudentStatisticsByYear() {
		String jpql = "SELECT " + "s.name, " + "SUM(CASE WHEN c.gender = 'M' THEN 1 ELSE 0 END) AS male_students, "
				+ "SUM(CASE WHEN c.gender = 'F' THEN 1 ELSE 0 END) AS female_students " + "FROM School s "
				+ "JOIN Candidate c ON s.id = c.school.id " + "WHERE c.status = 'ACTIVE' " + "GROUP BY s.name";

		Query query = entityManager.createQuery(jpql);
		 List<Object[]> results = query.getResultList();
		 
		 List<Map<String, String>> studentStatisticsList = new ArrayList<>();
        for (Object[] result : results) {
            Map<String, Object> studentStatistics = new TreeMap<>();
            studentStatistics.put("schools", result[0]);
            studentStatistics.put("male", result[1]);
            studentStatistics.put("female", result[2]);
            studentStatisticsList.add(studentStatistics);
        }

        return studentStatisticsList;
		
	}

}
